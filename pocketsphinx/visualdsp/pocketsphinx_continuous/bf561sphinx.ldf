/* MANAGED-BY-SYSTEM-BUILDER                                    */

/*
** ADSP-BF561 linker description file generated on Feb 22, 2008 at 17:31:53.
**
** Copyright (C) 2000-2007 Analog Devices Inc., All Rights Reserved.
**
** This file is generated automatically based upon the options selected
** in the LDF Wizard. Changes to the LDF configuration should be made by
** changing the appropriate options rather than editing this file.
**
** Configuration:-
**     crt_doj:                                .\Debug\bf561sphinx_basiccrt.doj
**     processor:                              ADSP-BF561
**     si_revision:                            automatic
**     cplb_init_cplb_ctrl:                    (
**                                              CPLB_ENABLE_ICACHE
**                                              CPLB_ENABLE_ICPLBS
**                                             )
**     using_cplusplus:                        true
**     mem_init:                               false
**     use_vdk:                                false
**     use_eh:                                 true
**     use_argv:                               false
**     running_from_internal_memory:           true
**     user_heap_src_file:                     C:\work\pocketsphinx\visualdsp\pocketsphinx_continuous\bf561sphinx_heaptab.c
**     libraries_use_stdlib:                   true
**     libraries_use_fileio_libs:              true
**     libraries_use_ieeefp_emulation_libs:    false
**     libraries_use_eh_enabled_libs:          false
**     system_heap:                            L3
**     system_heap_size:                       16M
**     system_stack:                           L2
**     system_stack_size:                      31K
**     use_sdram:                              true
**     use_sdram_size:                         64M
**     use_sdram_partitioned:                  custom
**     num_user_heaps:                         1
**     user_heap0:                             L3
**     user_heap0_size:                        16M
**     user_heap0_heap_name:                   MyHeap
**     use_multicores:                         2
**     use_multicores_use_core:                multi_core
**
*/

ARCHITECTURE(ADSP-BF561)

SEARCH_DIR($ADI_DSP/Blackfin/lib)


// Workarounds are enabled, exceptions are disabled.
#define RT_LIB_NAME(x) lib ## x ## y.dlb
#define RT_LIB_NAME_EH(x) lib ## x ## y.dlb
#define RT_LIB_NAME_MT(x) lib ## x ## mty.dlb
#define RT_LIB_NAME_EH_MT(x) lib ## x ## mty.dlb
#define RT_OBJ_NAME(x) x ## y.doj
#define RT_OBJ_NAME_MT(x) x ## mty.doj


#define LIBS \
   RT_LIB_NAME(mc561) \
   ,RT_LIB_NAME(small561) \
   ,RT_LIB_NAME_MT(c561) \
   ,RT_LIB_NAME_MT(rt_fileio561) \
   ,RT_LIB_NAME_MT(io561) \
   ,RT_LIB_NAME_MT(event561) \
   ,RT_LIB_NAME_MT(x561) \
   ,RT_LIB_NAME_EH_MT(cpp561) \
   ,RT_LIB_NAME_EH_MT(cpprt561) \
   ,RT_LIB_NAME(f64ieee561) \
   ,RT_LIB_NAME(dsp561) \
   ,RT_LIB_NAME(sftflt561) \
   ,RT_LIB_NAME(etsi561) \
   ,RT_LIB_NAME(ssl561) \
   ,RT_LIB_NAME(drv561) \
   ,RT_LIB_NAME(rt561) \

$LIBS = LIBS;
$LIBRARIES_CORE_A = 

/*$VDSG<insert-user-libraries-coreA-beginning>                  */
   corea.dlb,
/*$VDSG<insert-user-libraries-coreA-beginning>                  */

   RT_LIB_NAME_MT(io561)
   ,corea.dlb
   ,$LIBS {(!DualCoreMem("CoreB")) && (!sharing("MustShare"))}

/*$VDSG<insert-user-libraries-coreA-end>                        */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-user-libraries-coreA-end>                        */

   ;

$LIBRARIES_CORE_B = 

/*$VDSG<insert-user-libraries-coreB-beginning>                  */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-user-libraries-coreB-beginning>                  */

   RT_LIB_NAME_MT(io561)
   ,coreb.dlb
   ,$LIBS {(!DualCoreMem("CoreA")) && (!sharing("MustShare"))}

/*$VDSG<insert-user-libraries-coreB-end>                        */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-user-libraries-coreB-end>                        */

   ;

$LIBRARIES_SML2 = 

/*$VDSG<insert-user-libraries-shared-memory-L2-beginning>       */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-user-libraries-shared-memory-L2-beginning>       */

   sml2.dlb
   ,$LIBS

/*$VDSG<insert-user-libraries-shared-memory-L2-end>             */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-user-libraries-shared-memory-L2-end>             */

   ;

$LIBRARIES_SML3 = 

/*$VDSG<insert-user-libraries-shared-memory-L3-beginning>       */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-user-libraries-shared-memory-L3-beginning>       */

   sml3.dlb
   ,$LIBS

/*$VDSG<insert-user-libraries-shared-memory-L3-end>             */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-user-libraries-shared-memory-L3-end>             */

   ;

$LIBRARIES_SML2_CM = 
   $LIBRARIES_SML2

/*$VDSG<insert-user-libraries-common-memory-L2>                 */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-user-libraries-common-memory-L2>                 */

   ;

$LIBRARIES_SML3_CM = 
   $LIBRARIES_SML3

/*$VDSG<insert-user-libraries-common-memory-L3>                 */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-user-libraries-common-memory-L3>                 */

   ;

$LIBRARIES_SHARED = 
   $LIBS

/*$VDSG<insert-user-libraries-shared>                           */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-user-libraries-shared>                           */

   ;

$OBJECTS_CORE_A = 

/*$VDSG<insert-user-objects-for-coreA-beginning>                */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-user-objects-for-coreA-beginning>                */

   ".\Debug\bf561sphinx_basiccrt.doj"
   , RT_LIB_NAME(profile561)
   , $COMMAND_LINE_OBJECTS {!DualCoreMem("CoreB")}
   , "cplbtab561a.doj"
   , RT_OBJ_NAME(crtn561)

/*$VDSG<insert-user-objects-for-coreA-end>                      */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-user-objects-for-coreA-end>                      */

   ;

$OBJS_LIBS_INTERNAL_CORE_A = 

/*$VDSG<insert-libraries-internal_coreA>                        */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-libraries-internal_coreA>                        */

   $OBJECTS_CORE_A{prefersMem("internal")}, $LIBRARIES_CORE_A{prefersMem("internal")}

/*$VDSG<insert-libraries-internal_coreA-end>                    */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-libraries-internal_coreA-end>                    */

   ;

$OBJS_LIBS_NOT_EXTERNAL_CORE_A = 

/*$VDSG<insert-libraries-not-external_coreA>                    */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-libraries-not-external_coreA>                    */

   $OBJECTS_CORE_A{!prefersMem("external")}, $LIBRARIES_CORE_A{!prefersMem("external")}

/*$VDSG<insert-libraries-not-external_coreA-end>                */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-libraries-not-external_coreA-end>                */

   ;

$OBJECTS_CORE_B = 

/*$VDSG<insert-user-objects-for-coreB-beginning>                */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-user-objects-for-coreB-beginning>                */

   ".\Debug\bf561sphinx_basiccrt.doj"
   , RT_LIB_NAME(profile561)
   , $COMMAND_LINE_OBJECTS {!DualCoreMem("CoreA")}
   , "cplbtab561b.doj"
   , RT_OBJ_NAME(crtn561)

/*$VDSG<insert-user-objects-for-coreB-end>                      */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-user-objects-for-coreB-end>                      */

   ;

$OBJS_LIBS_INTERNAL_CORE_B = 

/*$VDSG<insert-libraries-internal_coreB>                        */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-libraries-internal_coreB>                        */

   $OBJECTS_CORE_B{prefersMem("internal")}, $LIBRARIES_CORE_B{prefersMem("internal")}

/*$VDSG<insert-libraries-internal_coreB-end>                    */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-libraries-internal_coreB-end>                    */

   ;

$OBJS_LIBS_NOT_EXTERNAL_CORE_B = 

/*$VDSG<insert-libraries-not-external_coreB>                    */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-libraries-not-external_coreB>                    */

   $OBJECTS_CORE_B{!prefersMem("external")}, $LIBRARIES_CORE_B{!prefersMem("external")}

/*$VDSG<insert-libraries-not-external_coreB-end>                */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-libraries-not-external_coreB-end>                */

   ;

$OBJECTS = $COMMAND_LINE_OBJECTS;

/*$VDSG<insert-user-macros>                                     */
/* Text inserted between these $VDSG comments will be preserved */
/*$VDSG<insert-user-macros>                                     */


/*$VDSG<customise-async-macros>                                 */
/* This code is preserved if the LDF is re-generated.           */


#define ASYNC0_MEMTYPE RAM
#define ASYNC1_MEMTYPE RAM
#define ASYNC2_MEMTYPE RAM
#define ASYNC3_MEMTYPE RAM


/*$VDSG<customise-async-macros>                                 */


MEMORY
{
  /*
  ** ADSP-BF561 MEMORY MAP.
  **
  ** The known memory spaces are as follows:
  **
  ** 0xFFE00000 - 0xFFFFFFFF  Core MMR registers
  ** 0xFFC00000 - 0xFFDFFFFF  System MMR (Shared)
  ** 0xFFB01000 - 0xFFBFFFFF
  ** 0xFFB00000 - 0xFFB00FFF  Scratchpad
  ** 0xFFA14000 - 0xFFAF0000
  ** 0xFFA10000 - 0xFFA13FFF  Instr SR/Ca
  ** 0xFFA08000 - 0xFFA0FFFF
  ** 0xFFA04000 - 0xFFA07FFF
  ** 0xFFA00000 - 0xFFA03FFF  Instr SR
  ** 0xFF908000 - 0xFF9FFFFF
  ** 0xFF904000 - 0xFF907FFF  Bank B SR/Ca
  ** 0xFF900000 - 0xFF903FFF  Bank B SR
  ** 0xFF808000 - 0xFF8FFFFF
  ** 0xFF804000 - 0xFF807FFF  Bank A SR/Ca
  ** 0xFF800000 - 0xFF803FFF  Bank A SR
  ** 0xFF701000 - 0xFF7FFFFF
  ** 0xFF700000 - 0xFF700FFF  Scratchpad
  ** 0xFF614000 - 0xFF6FFFFF
  ** 0xFF610000 - 0xFF613FFF  Instr SR/Ca
  ** 0xFF608000 - 0xFF60FFFF
  ** 0xFF604000 - 0xFF607FFF
  ** 0xFF600000 - 0xFF603FFF  Instr SR
  ** 0xFF508000 - 0xFF5FFFFF
  ** 0xFF504000 - 0xFF507FFF  Bank B SR/Ca
  ** 0xFF500000 - 0xFF503FFF  Bank B SR
  ** 0xFF408000 - 0xFF4FFFFF
  ** 0xFF404000 - 0xFF407FFF  Bank A SR/Ca
  ** 0xFF400000 - 0xFF403FFF  Bank A SR
  ** 0xFEB20000 - 0xFF3FFFFF
  ** 0xFEB00000 - 0xFEB1FFFF  L2 Shared
  ** 0xEF004000 - 0xFEAFFFFF
  ** 0xEF002000 - 0xEF003FFF
  ** 0xEF001000 - 0xEF001FFF
  ** 0xEF000800 - 0xEF000FFF
  ** 0xEF000000 - 0xEF0007FF  Boot ROM
  ** 0x30000000 - 0xEEFFFFFF
  ** 0x2C000000 - 0x2FFFFFFF  Async 3
  ** 0x28000000 - 0x2BFFFFFF  Async 2
  ** 0x24000000 - 0x27FFFFFF  Async 1
  ** 0x20000000 - 0x23FFFFFF  Async 0
  ** 0x00000000 - 0x1FFFFFFF  SDRAM MEMORY (512MB)
  */
  
   MEM_L2_SRAM             { TYPE(RAM) START(0xFEB10000) END(0xFEB1FFFF) WIDTH(8) }
   MEM_ASYNC3              { TYPE(ASYNC3_MEMTYPE) START(0x2C000000) END(0x2FFFFFFF) WIDTH(8) }
   MEM_ASYNC2              { TYPE(ASYNC2_MEMTYPE) START(0x28000000) END(0x2BFFFFFF) WIDTH(8) }
   MEM_ASYNC1              { TYPE(ASYNC1_MEMTYPE) START(0x24000000) END(0x27FFFFFF) WIDTH(8) }
   MEM_ASYNC0              { TYPE(ASYNC0_MEMTYPE) START(0x20000000) END(0x23FFFFFF) WIDTH(8) }
   
   /*$VDSG<customise-sdram-mem-partition>                       */
   /* This code is preserved if the LDF is re-generated.        */
   
   MEM_SDRAM_BANK0         { TYPE(RAM) START(0x00000004) END(0x00ffffff) WIDTH(8) } 
   MEM_SDRAM_BANK1         { TYPE(RAM) START(0x01000000) END(0x01ffffff) WIDTH(8) } 
   MEM_SDRAM_BANK2         { TYPE(RAM) START(0x02000000) END(0x02ffffff) WIDTH(8) } 
   MEM_SDRAM_BANK3         { TYPE(RAM) START(0x03000000) END(0x03ffffff) WIDTH(8) } 
   /*$VDSG<customise-sdram-mem-partition>                       */
   
   
   /*$VDSG<insert-new-memory-segments>                          */
   /* Text inserted between these $VDSG comments will be preserved */
   /*$VDSG<insert-new-memory-segments>                          */
   
} /* MEMORY */

COMMON_MEMORY
{
   OUTPUT($COMMAND_LINE_OUTPUT_DIRECTORY/L2_and_L3_common_memory.sm)
   MASTERS(p0, p1)
   
   /*$VDSG<insert-user-ldf-commands-in-COMMON-MEMORY>           */
   /* Text inserted between these $VDSG comments will be preserved */
   /*$VDSG<insert-user-ldf-commands-in-COMMON-MEMORY>           */
   
   SECTIONS
   {
      
      /*$VDSG<insert-new-sections-at-the-start-for-COMMON-MEMORY>  */
      /* Text inserted between these $VDSG comments will be preserved */
      /*$VDSG<insert-new-sections-at-the-start-for-COMMON-MEMORY>  */
      
      L2_shared_locks
      {
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS($LIBRARIES_SHARED{sharing("MustShare")}(data1))
         INPUT_SECTIONS($LIBRARIES_SHARED(l2_shared))
         INPUT_SECTIONS($LIBRARIES_SHARED(primio_atomic_lock))
         INPUT_SECTIONS($LIBRARIES_SHARED(mc_data))
         INPUT_SECTIONS($LIBRARIES_SHARED(voldata))
      } > MEM_L2_SRAM

      L2_sram
      {
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS($LIBRARIES_SML2_CM(l2_sram))
         INPUT_SECTIONS($LIBRARIES_SML2_CM{prefersMem("internal")}(program))
         INPUT_SECTIONS($LIBRARIES_SML2_CM{prefersMem("internal")}(data1))
         INPUT_SECTIONS($LIBRARIES_SML2_CM{!prefersMem("external")}(program))
         INPUT_SECTIONS($LIBRARIES_SML2_CM{!prefersMem("external")}(data1))
         INPUT_SECTIONS($LIBRARIES_SML2_CM(constdata))
         INPUT_SECTIONS($LIBRARIES_SML2_CM(voldata))
         INPUT_SECTIONS($LIBRARIES_SML2_CM(noncache_code))
         INPUT_SECTIONS($LIBRARIES_SML2_CM(program))
         INPUT_SECTIONS($LIBRARIES_SML2_CM(data1))
         
         /*$VDSG<insert-input-sections-at-the-end-of-l2_sram-CM>  */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-end-of-l2_sram-CM>  */
         
      } > MEM_L2_SRAM

      L2_bsz ZERO_INIT
      {
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS($LIBRARIES_SML2_CM(L2_bsz))
         INPUT_SECTIONS($LIBRARIES_SML2_CM{prefersMem("internal")}(bsz))
         INPUT_SECTIONS($LIBRARIES_SML2_CM{!prefersMem("external")}(bsz))
         INPUT_SECTIONS($LIBRARIES_SML2_CM(bsz))
      } > MEM_L2_SRAM

      L2_eh_rtti
      {
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS($LIBRARIES_SML2_CM(ctor)  $LIBRARIES_SML3_CM(ctor))
         INPUT_SECTIONS($LIBRARIES_SML2_CM(vtbl)  $LIBRARIES_SML3_CM(vtbl))
         INPUT_SECTIONS($LIBRARIES_SML2_CM(.frt)  $LIBRARIES_SML3_CM(.frt))
         INPUT_SECTIONS($LIBRARIES_SML2_CM(.edt)  $LIBRARIES_SML3_CM(.edt))
         INPUT_SECTIONS($LIBRARIES_SML2_CM(.cht)  $LIBRARIES_SML3_CM(.cht))
         INPUT_SECTIONS($LIBRARIES_SML2_CM(.rtti) $LIBRARIES_SML3_CM(.rtti))
      } > MEM_L2_SRAM

      L2_shared
      {
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS($LIBRARIES_SHARED{sharing("MustShare")}(data1))
         INPUT_SECTIONS($LIBRARIES_SHARED(l2_shared))
         INPUT_SECTIONS($LIBRARIES_SHARED(primio_atomic_lock))
         INPUT_SECTIONS($LIBRARIES_SHARED(mc_data))
      } > MEM_L2_SRAM

      
      /*$VDSG<customise-sdram-section-partition-CM>             */
      /* This code is preserved if the LDF is re-generated.     */
      
      sdram_bank0
      {
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS($LIBRARIES_SML3_CM(sdram_data_bank0))
         INPUT_SECTIONS($LIBRARIES_SML3_CM(sdram_bank0))
         INPUT_SECTIONS($LIBRARIES_SML3_CM(data1))
         INPUT_SECTIONS($LIBRARIES_SML3_CM(voldata))
         INPUT_SECTIONS($LIBRARIES_SML3_CM(constdata))
      } > MEM_SDRAM_BANK0

      sdram_bank0_bsz ZERO_INIT
      {
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS($LIBRARIES_SML3_CM(sdram_bsz))
         INPUT_SECTIONS($LIBRARIES_SML3_CM(bsz))
      } > MEM_SDRAM_BANK0

      sdram_bank1
      {
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS($LIBRARIES_SML3_CM(sdram0))
         INPUT_SECTIONS($LIBRARIES_SML3_CM(sdram_data_bank1))
         INPUT_SECTIONS($LIBRARIES_SML3_CM(sdram_bank1))
         INPUT_SECTIONS($LIBRARIES_SML3_CM(program))
         INPUT_SECTIONS($LIBRARIES_SML3_CM(noncache_code))
      } > MEM_SDRAM_BANK1

      /*$VDSG<customise-sdram-section-partition-CM>             */
      
      
      /*$VDSG<insert-new-sections-at-the-end-for-COMMON-MEMORY>  */
      /* Text inserted between these $VDSG comments will be preserved */
      /*$VDSG<insert-new-sections-at-the-end-for-COMMON-MEMORY>  */
      
   } /* SECTIONS */
} /* COMMON_MEMORY */

PROCESSOR p0
{
   
   MEMORY
   {
      MEM_L2_SRAM_A           { TYPE(RAM) START(0xFEB08000) END(0xFEB0FFFF) WIDTH(8) }
      MEM_A_L1_SCRATCH        { TYPE(RAM) START(0xFFB00000) END(0xFFB00FFF) WIDTH(8) }
      MEM_A_L1_CODE_CACHE     { TYPE(RAM) START(0xFFA10000) END(0xFFA13FFF) WIDTH(8) }
      MEM_A_L1_CODE           { TYPE(RAM) START(0xFFA00000) END(0xFFA03FFF) WIDTH(8) }
      MEM_A_L1_DATA_B         { TYPE(RAM) START(0xFF900000) END(0xFF907FFF) WIDTH(8) }
      MEM_A_L1_DATA_A         { TYPE(RAM) START(0xFF800000) END(0xFF807FFF) WIDTH(8) }
      
      /*$VDSG<insert-new-memory-segments-for-CORE-A>            */
      /* Text inserted between these $VDSG comments will be preserved */
      /*$VDSG<insert-new-memory-segments-for-CORE-A>            */
      
   } /* MEMORY */
   
   OUTPUT($COMMAND_LINE_OUTPUT_DIRECTORY/p0.dxe)
   RESOLVE(start, 0xFFA00000)
   KEEP(start,_main)
   
   /*$VDSG<insert-user-ldf-commands-for-CORE-A>                 */
   /* Text inserted between these $VDSG comments will be preserved */
   /*$VDSG<insert-user-ldf-commands-for-CORE-A>                 */
   
   SECTIONS
   {
      /* FEB1FC00->FEB1FFFF : Reserved in boot Phase for 2nd stage boot loader. */
      RESERVE(___ssld=0xFEB1FC00, ___lssld = 0x400)
      
      /*$VDSG<insert-new-sections-at-the-start-for-CORE-A>      */
      /* Text inserted between these $VDSG comments will be preserved */
      /*$VDSG<insert-new-sections-at-the-start-for-CORE-A>      */
      
      scratchpad
      {
         INPUT_SECTION_ALIGN(4)
         
         /*$VDSG<insert-input-sections-at-the-start-of-scratchpad-for-CORE-A>  */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-start-of-scratchpad-for-CORE-A>  */
         
      } > MEM_A_L1_SCRATCH

      L1_code
      {
         INPUT_SECTION_ALIGN(4)
         __CORE = 0;
         INPUT_SECTIONS($OBJECTS_CORE_A(L1_code) $LIBRARIES_CORE_A(L1_code))
         
         /*$VDSG<insert-input-sections-at-the-start-of-l1_code>  */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-start-of-l1_code>  */
         
         INPUT_SECTIONS($OBJECTS_CORE_A(VDK_ISR_code) $LIBRARIES_CORE_A(VDK_ISR_code))
         INPUT_SECTIONS($OBJECTS_CORE_A(cplb) $LIBRARIES_CORE_A(cplb))
         INPUT_SECTIONS($OBJECTS_CORE_A(cplb_code) $LIBRARIES_CORE_A(cplb_code))
         INPUT_SECTIONS($OBJECTS_CORE_A(noncache_code) $LIBRARIES_CORE_A(noncache_code))
         INPUT_SECTIONS($OBJS_LIBS_INTERNAL_CORE_A(program))
         INPUT_SECTIONS($OBJS_LIBS_NOT_EXTERNAL_CORE_A(program))
         INPUT_SECTIONS($OBJECTS_CORE_A(program) $LIBRARIES_CORE_A(program))
         
         /*$VDSG<insert-input-sections-at-the-end-of-l1_code>   */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-end-of-l1_code>   */
         
      } > MEM_A_L1_CODE

      L1_code_cache
      {
         INPUT_SECTION_ALIGN(4)
         ___l1_code_cache = 1;
      } > MEM_A_L1_CODE_CACHE

      L1_data_a
      {
         INPUT_SECTION_ALIGN(4)
         ___l1_data_cache_a = 0;
         INPUT_SECTIONS($OBJECTS_CORE_A(L1_data_a) $LIBRARIES_CORE_A(L1_data_a))
         
         /*$VDSG<insert-input-sections-at-the-start-of-l1_data_a>  */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-start-of-l1_data_a>  */
         
         INPUT_SECTIONS($OBJECTS_CORE_A{DualCoreMem("CoreA")}(cplb_data) $LIBRARIES_CORE_A{DualCoreMem("CoreA")}(cplb_data))
         INPUT_SECTIONS($OBJECTS_CORE_A(cplb_data) $LIBRARIES_CORE_A(cplb_data))
         INPUT_SECTIONS($OBJECTS_CORE_A(voldata) $LIBRARIES_CORE_A(voldata))
         INPUT_SECTIONS($OBJECTS_CORE_A(constdata) $LIBRARIES_CORE_A(constdata))
         INPUT_SECTIONS($OBJS_LIBS_INTERNAL_CORE_A(data1))
         INPUT_SECTIONS($OBJS_LIBS_NOT_EXTERNAL_CORE_A(data1))
         INPUT_SECTIONS($OBJECTS_CORE_A(data1) $LIBRARIES_CORE_A(data1))
         INPUT_SECTIONS($OBJECTS_CORE_A(.edt) $LIBRARIES_CORE_A(.edt))
         INPUT_SECTIONS($OBJECTS_CORE_A(.cht) $LIBRARIES_CORE_A(.cht))
         
         /*$VDSG<insert-input-sections-at-the-end-of-l1_data_a>  */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-end-of-l1_data_a>  */
         
      } > MEM_A_L1_DATA_A

      bsz_L1_data_a ZERO_INIT
      {
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS($OBJECTS_CORE_A(bsz) $LIBRARIES_CORE_A(bsz))
      } > MEM_A_L1_DATA_A

      L1_data_a_stack_heap
      {
         INPUT_SECTION_ALIGN(4)
      } > MEM_A_L1_DATA_A

      L1_data_b
      {
         INPUT_SECTION_ALIGN(4)
         ___l1_data_cache_b = 0;
         INPUT_SECTIONS($OBJECTS_CORE_A(L1_data_b) $LIBRARIES_CORE_A(L1_data_b))
         
         /*$VDSG<insert-input-sections-at-the-start-of-l1_data_b>  */
         INPUT_SECTIONS($OBJECTS_CORE_A(dmamem) $LIBRARIES_CORE_A(dmamem))
         /*$VDSG<insert-input-sections-at-the-start-of-l1_data_b>  */
         
         INPUT_SECTIONS($OBJECTS_CORE_A(ctor) $LIBRARIES_CORE_A(ctor))
         INPUT_SECTIONS($OBJECTS_CORE_A(ctorl) $LIBRARIES_CORE_A(ctorl))
         INPUT_SECTIONS($OBJECTS_CORE_A(vtbl) $LIBRARIES_CORE_A(vtbl))
         INPUT_SECTIONS($OBJECTS_CORE_A(.frt) $LIBRARIES_CORE_A(.frt))
         INPUT_SECTIONS($OBJECTS_CORE_A(.rtti) $LIBRARIES_CORE_A(.rtti))
         INPUT_SECTIONS($OBJECTS_CORE_A(.edt) $LIBRARIES_CORE_A(.edt))
         INPUT_SECTIONS($OBJECTS_CORE_A(.cht) $LIBRARIES_CORE_A(.cht))
         INPUT_SECTIONS($OBJS_LIBS_INTERNAL_CORE_A(data1))
         INPUT_SECTIONS($OBJS_LIBS_NOT_EXTERNAL_CORE_A(data1))
         INPUT_SECTIONS($OBJECTS_CORE_A(data1) $LIBRARIES_CORE_A(data1))
         INPUT_SECTIONS($OBJECTS_CORE_A{DualCoreMem("CoreA")}(cplb_data) $LIBRARIES_CORE_A{DualCoreMem("CoreA")}(cplb_data))
         INPUT_SECTIONS($OBJECTS_CORE_A(cplb_data) $LIBRARIES_CORE_A(cplb_data))
         INPUT_SECTIONS($OBJECTS_CORE_A(voldata) $LIBRARIES_CORE_A(voldata))
         INPUT_SECTIONS($OBJECTS_CORE_A(constdata) $LIBRARIES_CORE_A(constdata))
         
         /*$VDSG<insert-input-sections-at-the-end-of-l1_data_b>  */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-end-of-l1_data_b>  */
         
      } > MEM_A_L1_DATA_B

      bsz_L1_data_b ZERO_INIT
      {
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS($OBJS_LIBS_INTERNAL_CORE_A(bsz))
         INPUT_SECTIONS($OBJS_LIBS_NOT_EXTERNAL_CORE_A(bsz))
         INPUT_SECTIONS($OBJECTS_CORE_A(bsz) $LIBRARIES_CORE_A(bsz))
      } > MEM_A_L1_DATA_B

      p0_gdt
      {
         INPUT_SECTIONS($OBJECTS_CORE_A(.gdt) $LIBRARIES_CORE_A(.gdt))
         INPUT_SECTIONS($LIBRARIES_SML3_CM(.gdt))
         INPUT_SECTIONS($LIBRARIES_SML2_CM(.gdt))
         INPUT_SECTIONS($OBJECTS_CORE_A(.gdtl) $LIBRARIES_CORE_A(.gdtl))
         INPUT_SECTIONS($LIBRARIES_SML3_CM(.gdtl))
         INPUT_SECTIONS($LIBRARIES_SML2_CM(.gdtl))
      } > MEM_SDRAM_BANK1

      L1_data_b_stack_heap
      {
         INPUT_SECTION_ALIGN(4)
      } > MEM_A_L1_DATA_B

      L2_sram_a
      {
         INPUT_SECTION_ALIGN(4)
         
         /*$VDSG<insert-input-sections-at-the-start-of-l2_sram_a>  */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-start-of-l2_sram_a>  */
         
         RESERVE(heaps_and_stack_in_L2_sram_a, heaps_and_stack_in_L2_sram_a_length = 31K,4)
         
         /*$VDSG<insert-input-sections-at-the-end-of-l2_sram_a>  */
         /*$VDSG<insert-input-sections-at-the-end-of-l2_sram_a>  */
         
      } > MEM_L2_SRAM_A

      bsz_L2_sram_a ZERO_INIT
      {
         INPUT_SECTION_ALIGN(4)
         
         /*$VDSG<insert-input-sections-at-the-end-of-bsz_l2_sram_a>  */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-end-of-bsz_l2_sram_a>  */
         
      } > MEM_L2_SRAM_A

      L2_sram_a_stack_heap
      {
         INPUT_SECTION_ALIGN(4)
         RESERVE_EXPAND(heaps_and_stack_in_L2_sram_a, heaps_and_stack_in_L2_sram_a_length , 0, 4)
         ldf_stack_space = heaps_and_stack_in_L2_sram_a;
         ldf_stack_end = (ldf_stack_space + (31K - 4)) & 0xfffffffc;
      } > MEM_L2_SRAM_A

      
      /*$VDSG<customise-sdram-section-partition_coreA>          */
      /* This code is preserved if the LDF is re-generated.     */
      
      sdram_bank2_1
      {
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS($OBJECTS_CORE_A(sdram_bank2) $LIBRARIES_CORE_A(sdram_bank2))
      } > MEM_SDRAM_BANK2

      sdram_bank2_stack_and_heap
      {
         INPUT_SECTION_ALIGN(4)
         RESERVE(heaps_and_stack_in_L3_CORE_A, heaps_and_stack_in_L3_CORE_A_length = 16384K,4)
         RESERVE_EXPAND(heaps_and_stack_in_L3_CORE_A, heaps_and_stack_in_L3_CORE_A_length , 0, 4)
         ldf_heap_space = heaps_and_stack_in_L3_CORE_A;
         ldf_heap_end = (ldf_heap_space + (14384K - 4)) & 0xfffffffc;
         ldf_heap_length = ldf_heap_end - ldf_heap_space;
      } > MEM_SDRAM_BANK2

      sdram_bank2_3
      {
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS($OBJECTS_CORE_A(sdram_data_bank2) $LIBRARIES_CORE_A(sdram_data_bank2))
         INPUT_SECTIONS($OBJECTS_CORE_A(constdata) $LIBRARIES_CORE_A(constdata))
      } > MEM_SDRAM_BANK2

      /*$VDSG<customise-sdram-section-partition_coreA>          */
      
      
      /*$VDSG<insert-new-sections-at-the-end-for-CORE-A>        */
      sdram_data_bsz ZERO_INIT
      {
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS($OBJECTS_CORE_A(bsz) $LIBRARIES_CORE_A(bsz))
      } > MEM_SDRAM_BANK1

      sdram_data
      {
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS($OBJECTS_CORE_A(constdata) $LIBRARIES_CORE_A(constdata))
         INPUT_SECTIONS($OBJECTS_CORE_A(data1) $LIBRARIES_CORE_A(data1))
         INPUT_SECTIONS($OBJECTS_CORE_A(memoryfile) $LIBRARIES_CORE_A(memoryfile))

      } > MEM_SDRAM_BANK1

      sram_code
      {
         INPUT_SECTION_ALIGN(4)
   	  }> MEM_L2_SRAM
      
      sdram_code
      {
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS($OBJECTS_CORE_A(program) $LIBRARIES_CORE_A(program))
          
      } > MEM_SDRAM_BANK1

      myheap
      {
         INPUT_SECTION_ALIGN(4)
         
         RESERVE(MyHeap_space, MyHeap_length = 2048K,4)         
         RESERVE_EXPAND(MyHeap_space, MyHeap_length , 0, 4)
         
      } > MEM_SDRAM_BANK0
      /*$VDSG<insert-new-sections-at-the-end-for-CORE-A>        */
      
   } /* SECTIONS */
} /* p0 */

PROCESSOR p1
{
   
   MEMORY
   {
      MEM_L2_SRAM_B           { TYPE(RAM) START(0xFEB00000) END(0xFEB07FFF) WIDTH(8) }
      MEM_B_L1_SCRATCH        { TYPE(RAM) START(0xFF700000) END(0xFF700FFF) WIDTH(8) }
      MEM_B_L1_CODE_CACHE     { TYPE(RAM) START(0xFF610000) END(0xFF613FFF) WIDTH(8) }
      MEM_B_L1_CODE           { TYPE(RAM) START(0xFF600000) END(0xFF603FFF) WIDTH(8) }
      MEM_B_L1_DATA_B         { TYPE(RAM) START(0xFF500000) END(0xFF507FFF) WIDTH(8) }
      MEM_B_L1_DATA_A         { TYPE(RAM) START(0xFF400000) END(0xFF407FFF) WIDTH(8) }
      
      /*$VDSG<insert-new-memory-segments-for-CORE-B>            */
      /* Text inserted between these $VDSG comments will be preserved */
      /*$VDSG<insert-new-memory-segments-for-CORE-B>            */
      
   } /* MEMORY */
   
   OUTPUT($COMMAND_LINE_OUTPUT_DIRECTORY/p1.dxe)
   RESOLVE(start, 0xFF600000)
   KEEP(start,_main)
   
   /*$VDSG<insert-user-ldf-commands-for-CORE-B>                 */
   /* Text inserted between these $VDSG comments will be preserved */
   /*$VDSG<insert-user-ldf-commands-for-CORE-B>                 */
   
   SECTIONS
   {
      
      /*$VDSG<insert-new-sections-at-the-start-for-CORE-B>      */
      /* Text inserted between these $VDSG comments will be preserved */
      /*$VDSG<insert-new-sections-at-the-start-for-CORE-B>      */
      
      scratchpad
      {
         INPUT_SECTION_ALIGN(4)
         
         /*$VDSG<insert-input-sections-at-the-start-of-scratchpad-for-CORE-B>  */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-start-of-scratchpad-for-CORE-B>  */
         
      } > MEM_B_L1_SCRATCH

      L1_code
      {
         INPUT_SECTION_ALIGN(4)
         __CORE = 1;
         INPUT_SECTIONS($OBJECTS_CORE_B(L1_code) $LIBRARIES_CORE_B(L1_code))
         
         /*$VDSG<insert-input-sections-at-the-start-of-l1_code_coreB>  */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-start-of-l1_code_coreB>  */
         
         INPUT_SECTIONS($OBJECTS_CORE_B(VDK_ISR_code) $LIBRARIES_CORE_B(VDK_ISR_code))
         INPUT_SECTIONS($OBJECTS_CORE_B(cplb) $LIBRARIES_CORE_B(cplb))
         INPUT_SECTIONS($OBJECTS_CORE_B(cplb_code) $LIBRARIES_CORE_B(cplb_code))
         INPUT_SECTIONS($OBJECTS_CORE_B(noncache_code) $LIBRARIES_CORE_B(noncache_code))
         INPUT_SECTIONS($OBJECTS_CORE_B(program) $LIBRARIES_CORE_B(program))
         
         /*$VDSG<insert-input-sections-at-the-end-of-l1_code_coreB>  */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-end-of-l1_code_coreB>  */
         
      } > MEM_B_L1_CODE

      L1_code_cache
      {
         INPUT_SECTION_ALIGN(4)
         ___l1_code_cache = 1;
      } > MEM_B_L1_CODE_CACHE

      L1_data_a
      {
         INPUT_SECTION_ALIGN(4)
         ___l1_data_cache_a = 0;
         INPUT_SECTIONS($OBJECTS_CORE_B(L1_data_a) $LIBRARIES_CORE_B(L1_data_a))
         
         /*$VDSG<insert-input-sections-at-the-start-of-l1_data_a_coreB>  */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-start-of-l1_data_a_coreB>  */
         
         INPUT_SECTIONS($OBJECTS_CORE_B{DualCoreMem("CoreB")}(cplb_data) $LIBRARIES_CORE_B{DualCoreMem("CoreB")}(cplb_data))
         INPUT_SECTIONS($OBJECTS_CORE_B(cplb_data) $LIBRARIES_CORE_B(cplb_data))
         INPUT_SECTIONS($OBJECTS_CORE_B(voldata) $LIBRARIES_CORE_B(voldata))
         INPUT_SECTIONS($OBJECTS_CORE_B(constdata) $LIBRARIES_CORE_B(constdata))
         INPUT_SECTIONS($OBJS_LIBS_INTERNAL_CORE_B(data1))
         INPUT_SECTIONS($OBJS_LIBS_NOT_EXTERNAL_CORE_B(data1))
         INPUT_SECTIONS($OBJECTS_CORE_B(data1) $LIBRARIES_CORE_B(data1))
         INPUT_SECTIONS($OBJECTS_CORE_B(.edt) $LIBRARIES_CORE_B(.edt))
         INPUT_SECTIONS($OBJECTS_CORE_B(.cht) $LIBRARIES_CORE_B(.cht))
         
         /*$VDSG<insert-input-sections-at-the-end-of-l1_data_a_coreB>  */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-end-of-l1_data_a_coreB>  */
         
      } > MEM_B_L1_DATA_A

      bsz_L1_data_a ZERO_INIT
      {
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS($OBJS_LIBS_INTERNAL_CORE_B(bsz))
         INPUT_SECTIONS($OBJS_LIBS_NOT_EXTERNAL_CORE_B(bsz))
         INPUT_SECTIONS($OBJECTS_CORE_B(bsz) $LIBRARIES_CORE_B(bsz))
      } > MEM_B_L1_DATA_A

      L1_data_a_stack_heap
      {
         INPUT_SECTION_ALIGN(4)
      } > MEM_B_L1_DATA_A

      L1_data_b
      {
         INPUT_SECTION_ALIGN(4)
         ___l1_data_cache_b = 0;
         INPUT_SECTIONS($OBJECTS_CORE_B(L1_data_b) $LIBRARIES_CORE_B(L1_data_b))
         
         /*$VDSG<insert-input-sections-at-the-start-of-l1_data_b_coreB>  */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-start-of-l1_data_b_coreB>  */
         
         INPUT_SECTIONS($OBJECTS_CORE_B(ctor) $LIBRARIES_CORE_B(ctor))
         INPUT_SECTIONS($OBJECTS_CORE_B(ctorl) $LIBRARIES_CORE_B(ctorl))
         INPUT_SECTIONS($OBJECTS_CORE_B(vtbl) $LIBRARIES_CORE_B(vtbl))
         INPUT_SECTIONS($OBJECTS_CORE_B(.frt) $LIBRARIES_CORE_B(.frt))
         INPUT_SECTIONS($OBJECTS_CORE_B(.rtti) $LIBRARIES_CORE_B(.rtti))
         INPUT_SECTIONS($OBJECTS_CORE_B(.edt) $LIBRARIES_CORE_B(.edt))
         INPUT_SECTIONS($OBJECTS_CORE_B(.cht) $LIBRARIES_CORE_B(.cht))
         INPUT_SECTIONS($OBJS_LIBS_INTERNAL_CORE_B(data1))
         INPUT_SECTIONS($OBJS_LIBS_NOT_EXTERNAL_CORE_B(data1))
         INPUT_SECTIONS($OBJECTS_CORE_B(data1) $LIBRARIES_CORE_B(data1))
         INPUT_SECTIONS($OBJECTS_CORE_B{DualCoreMem("CoreB")}(cplb_data) $LIBRARIES_CORE_B{DualCoreMem("CoreB")}(cplb_data))
         INPUT_SECTIONS($OBJECTS_CORE_B(cplb_data) $LIBRARIES_CORE_B(cplb_data))
         INPUT_SECTIONS($OBJECTS_CORE_B(voldata) $LIBRARIES_CORE_B(voldata))
         INPUT_SECTIONS($OBJECTS_CORE_B(constdata) $LIBRARIES_CORE_B(constdata))
         
         /*$VDSG<insert-input-sections-at-the-end-of-l1_data_b_coreB>  */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-end-of-l1_data_b_coreB>  */
         
      } > MEM_B_L1_DATA_B

      bsz_L1_data_b ZERO_INIT
      {
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS($OBJS_LIBS_INTERNAL_CORE_B(bsz))
         INPUT_SECTIONS($OBJS_LIBS_NOT_EXTERNAL_CORE_B(bsz))
         INPUT_SECTIONS($OBJECTS_CORE_B(bsz) $LIBRARIES_CORE_B(bsz))
      } > MEM_B_L1_DATA_B

      p1_gdt
      {
         INPUT_SECTIONS($OBJECTS_CORE_B(.gdt) $LIBRARIES_CORE_B(.gdt))
         INPUT_SECTIONS($LIBRARIES_SML3_CM(.gdt))
         INPUT_SECTIONS($LIBRARIES_SML2_CM(.gdt))
         INPUT_SECTIONS($OBJECTS_CORE_B(.gdtl) $LIBRARIES_CORE_B(.gdtl))
         INPUT_SECTIONS($LIBRARIES_SML3_CM(.gdtl))
         INPUT_SECTIONS($LIBRARIES_SML2_CM(.gdtl))
      } > MEM_SDRAM_BANK1

      L1_data_b_stack_heap
      {
         INPUT_SECTION_ALIGN(4)
      } > MEM_B_L1_DATA_B

      L2_sram_b
      {
         INPUT_SECTION_ALIGN(4)
         
         /*$VDSG<insert-input-sections-at-the-start-of-l2_sram_b>  */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-start-of-l2_sram_b>  */
         
         RESERVE(heaps_and_stack_in_L2_sram_b, heaps_and_stack_in_L2_sram_b_length = 31K,4)
         
         /*$VDSG<insert-input-sections-at-the-end-of-l2_sram_b>  */
         /* Text inserted between these $VDSG comments will be preserved */
         /*$VDSG<insert-input-sections-at-the-end-of-l2_sram_b>  */
         
      } > MEM_L2_SRAM_B

      bsz_L2_sram_b ZERO_INIT
      {
         INPUT_SECTION_ALIGN(4)
      } > MEM_L2_SRAM_B

      L2_sram_b_stack_heap
      {
         INPUT_SECTION_ALIGN(4)
         RESERVE_EXPAND(heaps_and_stack_in_L2_sram_b, heaps_and_stack_in_L2_sram_b_length , 0, 4)
         ldf_stack_space = heaps_and_stack_in_L2_sram_b;
         ldf_stack_end = (ldf_stack_space + (31K - 4)) & 0xfffffffc;
      } > MEM_L2_SRAM_B

      
      /*$VDSG<customise-sdram-section-partition_coreB>          */
      /* This code is preserved if the LDF is re-generated.     */
      
      sdram_bank3_1
      {
         INPUT_SECTION_ALIGN(4)
      } > MEM_SDRAM_BANK3

      sdram_bank3_stack_and_heap
      {
         INPUT_SECTION_ALIGN(4)
         RESERVE(heaps_and_stack_in_L3_CORE_B, heaps_and_stack_in_L3_CORE_B_length = 4096K,4)
         RESERVE_EXPAND(heaps_and_stack_in_L3_CORE_B, heaps_and_stack_in_L3_CORE_B_length , 0, 4)
         ldf_heap_space = heaps_and_stack_in_L3_CORE_B;
         ldf_heap_end = (ldf_heap_space + (1384K - 4)) & 0xfffffffc;
         ldf_heap_length = ldf_heap_end - ldf_heap_space;
         MyHeap_space = ldf_heap_end + 4;
         MyHeap_length = (MyHeap_space + (1384K - 4)) & 0xfffffffc;
      } > MEM_SDRAM_BANK3

      sdram_bank3_3
      {
         INPUT_SECTION_ALIGN(4)
         INPUT_SECTIONS($OBJECTS_CORE_B(sdram_data_bank3) $LIBRARIES_CORE_B(sdram_data_bank3))
         INPUT_SECTIONS($OBJECTS_CORE_B(constdata) $LIBRARIES_CORE_B(constdata))
      } > MEM_SDRAM_BANK3

      /*$VDSG<customise-sdram-section-partition_coreB>          */
      
      
      /*$VDSG<insert-new-sections-at-the-end-for-CORE-B>        */
      /* Text inserted between these $VDSG comments will be preserved */
      /*$VDSG<insert-new-sections-at-the-end-for-CORE-B>        */
      
   } /* SECTIONS */
} /* p1 */

