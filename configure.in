dnl Welcome to the Sphinx automated build system.
dnl try not to hurt yourself ;)

AC_INIT(sphinxbase, 0.4)
AM_CONFIG_HEADER([include/config.h include/sphinx_config.h])
AM_INIT_AUTOMAKE([no-define dist-bzip2 dist-zip])

CFLAGS=${CFLAGS:--g -O2 -Wall}

AC_CANONICAL_HOST

dnl
dnl Set proper compiler flags and such for some platforms
dnl
case $host in
     arm-wince-pe*)
	CFLAGS=${CFLAGS:--march=armv4 -mapcs-32 -malignment-traps}
	LIBS='-lc -lgcc -lwinsock -lcoredll'
	CFLAGS="$CFLAGS -DNEWLIB -DSARM -DWIN32 -DGNUWINCE"
	;;
     *uclinux*)
	# uClinux needs special "flat" binaries
	LDFLAGS="$LDFLAGS -Wl,-elf2flt"
	;;
     *)
     ;;
esac     

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
# Don't even bother until the rest of the world has an up-to-date Flex
#AM_PROG_LEX
AC_PROG_YACC
AC_HEADER_STDC
AC_WORDS_BIGENDIAN
AC_TYPE_SIGNAL
AC_CHECK_TYPES(long long)
AC_CHECK_SIZEOF(long long)
AC_CHECK_SIZEOF(long)
AC_CHECK_FUNCS([popen perror])
AC_CHECK_HEADER(errno.h)
AM_ICONV

dnl
dnl Check for Lapack stuff unless disabled
dnl
use_lapack=true
use_internal_lapack=false
AC_ARG_WITH(lapack,
	AC_HELP_STRING([--without-lapack],
		       [Disable matrix algebra support (depends on LAPACK)]),[
if test x$withval = xno; then
   use_lapack=false
fi
])
if test x$use_lapack = xtrue; then
   AC_CHECK_LIB(m, log)
   AC_CHECK_LIB(g2c, r_log)
   AC_CHECK_LIB(blas, sgemm_)
   AC_CHECK_LIB(lapack, sgesv_,,use_internal_lapack=true)
   AC_DEFINE(WITH_LAPACK, [], [Enable matrix algebra with LAPACK])
else
   AC_CHECK_LIB(m, log)
fi
AM_CONDITIONAL(LAPACK_LITE, test x$use_internal_lapack = xtrue)

dnl
dnl Enable thread-safe versions of some internal functions
dnl
threadsafe=true
AC_ARG_ENABLE(threads,
	AC_HELP_STRING([--disable-threads],
		       [Disable thread-safe versions of memory allocation functions]),[
if test x$enableval = xno; then
   threadsafe=false
fi
])
if test x$threadsafe = xtrue; then
   AC_CHECK_HEADERS([pthread.h])
   AC_CHECK_LIB(pthread, pthread_mutex_lock)
   AC_DEFINE(ENABLE_THREADS, [], [Enable thread safety])
fi

dnl
dnl Allow compilation for fixed or floating-point MFCC and GMM computation
dnl
fixed_point=false
AC_ARG_ENABLE(fixed,
	AC_HELP_STRING([--enable-fixed=RADIX],
		       [Use 32-bit fixed-point for MFCC and GMM computation,
		        optionally specifying a radix point]),[
if test x$enableval = xyes; then
   AC_DEFINE(FIXED_POINT)
   fixed_point=true
else
   AC_DEFINE(FIXED_POINT, [], [Use fixed-point computation])
   AC_DEFINE_UNQUOTED(DEFAULT_RADIX,$enableval,[Default radix point for fixed-point])
fi])
AM_CONDITIONAL(FIXED_POINT, test x$fixed_point = xtrue)

dnl
dnl Enable 16-bit fixed-point (Q15) format for MFCC (less accurate, more fast)
dnl
AC_ARG_ENABLE(fixed16,
	AC_HELP_STRING([--enable-fixed16],
		       [Use 16-bit fixed-point for MFCC computation]),[
if test x$enableval = xyes; then
   AC_DEFINE(FIXED_POINT, [], [Use fixed-point computation])
   AC_DEFINE(FIXED16, [], [Use Q15 fixed-point computation])
fi])

dnl
dnl determine audio type or use none if none supported on this platform
dnl

ad_files=""
ad_libs=""

dnl Added from suggestion by 
dnl Jasper van Veghel <jvveghel@vanboxtelsoftware.nl>, 02/03/2003:
AC_ARG_WITH(alsa,
           AC_HELP_STRING([--with-alsa], [Use ALSA library for sound I/O]),
           [ad_files="ad_alsa.lo"
            ad_backend="AD_BACKEND_ALSA"
            ad_libs="-lasound"
	    AC_DEFINE(AD_BACKEND_ALSA, [], [Use ALSA library for sound I/O])
            AC_CHECK_HEADER(alsa/asoundlib.h,,
                    AC_ERROR(ALSA header file <alsa/asoundlib.h> not found!))]
)

if test "x$ad_files" = "x"; then
        case $host in
                *-*-linux*|*-*-uclinux*)
                        ad_files="ad_oss.lo"
                        ad_backend="AD_BACKEND_OSS"
			AC_DEFINE(AD_BACKEND_OSS, [], [Use OSS interface for sound I/O])
                        ;;
                # FIXME: isn't this the same OSS as on Linux?
                *-*-freebsd*|*-*-netbsd*|*-*-openbsd*)
                        ad_files="ad_oss_bsd.lo"
                        ad_backend="AD_BACKEND_OSS_BSD"
			AC_DEFINE(AD_BACKEND_OSS_BSD, [], [Use OSS interface for sound I/O])
                        ;;
                *-*-osf*)
                        ad_files="ad_osf.lo"
                        ad_backend="AD_BACKEND_OSF"
			AC_DEFINE(AD_BACKEND_OSF, [], [Use OSF interface for sound I/O])
                        ;;
                *-*-irix*)
                        ad_files="ad_irix.lo"
                        ad_libs="-laudio"
                        ad_backend="AD_BACKEND_IRIX"
			AC_DEFINE(AD_BACKEND_IRIX, [], [Use IRIX interface for sound I/O])
                        ;;
                *-*-sunos4*)
                        ad_files="ad_sunos.lo audio_utils_sunos.lo"
                        ad_libs="-lm -lnsl -ldl"
                        ad_backend="AD_BACKEND_SUNOS"
			AC_DEFINE(AD_BACKEND_SUNOS, [], [Use SunOS interface for sound I/O])
                        ;;
                *-*-solaris*)
                        ad_files="ad_sunos.lo audio_utils_sunos.lo"
                        ad_libs="-lm -lnsl -lsocket -ldl"
                        ad_backend="AD_BACKEND_SUNOS"
			AC_DEFINE(AD_BACKEND_SUNOS, [], [Use SunOS interface for sound I/O])
                        ;;
                *-*-*cygwin*)
                        ad_files="play_win32.lo rec_win32.lo"
                        ad_libs="-lwinmm"
                        ad_backend="AD_BACKEND_WIN32"
			AC_DEFINE(AD_BACKEND_WIN32, [], [Use WinMM interface for sound I/O])
                        ;;
                *-*apple*-*)
                        ad_files="ad_portaudio.lo pa_convert.lo pa_lib.lo \
			          pa_mac_core.lo pa_trace.lo pablio.lo ringbuffer.lo"
                        ad_backend="AD_BACKEND_PORTAUDIO"
			ad_libs="-framework CoreAudio -framework AudioToolbox"
			AC_DEFINE(AD_BACKEND_PORTAUDIO, [], [Use PortAudio interface for sound I/O])
                        ;;
                *)
                        ad_files="ad_base.lo"
                        ad_backend="AD_BACKEND_NONE"
                        AC_MSG_RESULT([No audio interface for host type $host.])
			AC_DEFINE(AD_BACKEND_NONE, [], [No interface for sound I/O])
                        ;;
        esac
fi

AC_PATH_PROG(PERL,perl)
AC_PATH_PROG(CSH,csh)
AC_SUBST(ad_files)
AC_SUBST(ad_libs)
AC_SUBST(ad_backend)
AC_SUBST(PERL)
AC_SUBST(CSH)

AM_PROG_LIBTOOL

dnl
dnl Check for Doxygen, and build dox if present
dnl
AC_CHECK_PROG(HAVE_DOXYGEN, doxygen, yes, no)
AM_CONDITIONAL(BUILD_DOXYGEN, test "x$HAVE_DOXYGEN" = "xyes")


AC_OUTPUT([
sphinxbase.pc
Makefile
include/Makefile
src/Makefile
src/libsphinxad/Makefile
src/libsphinxbase/Makefile
src/libsphinxbase/util/Makefile
src/libsphinxbase/feat/Makefile
src/libsphinxbase/fe/Makefile
src/libsphinxbase/am/Makefile
src/libsphinxbase/lm/Makefile
src/sphinx_fe/Makefile
src/sphinx_cepview/Makefile
src/sphinx_jsgf2fsg/Makefile
src/sphinx_amtools/Makefile
src/sphinx_adtools/Makefile
src/sphinx_lmtools/Makefile
doc/Makefile
doc/doxyfile
test/Makefile
test/unit/testfuncs.sh
test/unit/Makefile
test/unit/test_alloc/Makefile
test/unit/test_bitvec/Makefile
test/unit/test_case/Makefile
test/unit/test_string/Makefile
test/unit/test_cmdln/Makefile
test/unit/test_hash/Makefile
test/unit/test_matrix/Makefile
test/unit/test_feat/Makefile
test/unit/test_fe/Makefile
test/unit/test_logmath/Makefile
test/unit/test_gmm/Makefile
test/unit/test_ngram/Makefile
test/unit/test_fsg/Makefile
test/regression/testfuncs.sh
test/regression/Makefile
])
